using System;
using System.IO;
using System.Runtime.Serialization.Json;
using System.Text;
using InjectionApi.Sdk.Client;
using InjectionApi.Sdk.Email;
using RestSharp;

namespace SocketLabs.InjectionApi.CSharp
{
    static public partial class Samples
    {
        /// <summary>
        /// This example uses the SocketLabs SDK PostBody object to create a POST
        /// request for sending one or more SMTP messages through SocketLabs On-Demand.
        /// The SocketLabs SDK library is required, and for this example we also use
        /// the RestSharp library to ask as our serializer and client.
        /// 
        /// We use as many fields as possible in this example, in order to show usage
        /// for most of our options in a single example.
        /// 
        /// The JSON request generated by this sample code looks like this:
        /// 
        ///{
        ///    "ServerId": "YOUR SERVER ID HERE",
        ///    "ApiKey": "YOUR API KEY HERE",
        ///    "Messages": [{
        ///        "MailingId": "Human Resources 017",
        ///        "MessageId": "0000-9999-0000-9999-0000",
        ///        "MergeData": null,
        ///        "Subject": "Welcome to The ABC Company!",
        ///        "TextBody": "Welcome to The ABC Company, new employees! You are all part of our new department.",
        ///        "HtmlBody": "<h1>Welcome to The ABC Company, new employee!</h1><br/><p>You are all part of our new department.</p>",
        ///        "CustomHeaders": [{
        ///            "Name": "Internal-Email-Type",
        ///            "Value": "HR/New Employee"
        ///        }],
        ///        "To": [{
        ///            "EmailAddress": "bob@example.com",
        ///            "FriendlyName": "Robert Smith"
        ///        },
        ///        {
        ///            "EmailAddress": "alice@example.com",
        ///            "FriendlyName": "Alice White"
        ///        },
        ///        {
        ///            "EmailAddress": "christine@example.com",
        ///            "FriendlyName": "Christine Johnson"
        ///        }],
        ///        "Cc": [{
        ///            "EmailAddress": "hr@example.com",
        ///            "FriendlyName": "HR Department"
        ///        }],
        ///        "Bcc": [{
        ///            "EmailAddress": "logging@example.com",
        ///            "FriendlyName": "Email Logging Account"
        ///        }],
        ///        "From": {
        ///            "EmailAddress": "donotreply@example.com",
        ///            "FriendlyName": "From Address"
        ///        },
        ///        "ReplyTo": {
        ///            "EmailAddress": "hr@example.com",
        ///            "FriendlyName": "HR Department"
        ///        },
        ///        "Charset": "us-ascii",
        ///        "Attachments": [{
        ///            "Name": "CompanyContacts.txt",
        ///            "ContentType": "text/plain",
        ///            "Content": "VEhJUyBJUyBUSEUgQVRUQUNITUVOVA==",
        ///            "CustomHeaders": null,
        ///            "ContentId": null
        ///        }]
        ///    },
        ///    {
        ///        "MailingId": "%%MailingId%%",
        ///        "MessageId": "%%CUSTOM-SERIAL-NUMBER-ID%%",
        ///        "MergeData": {
        ///            "PerMessage": [[{
        ///                "Field": "DeliveryAddress",
        ///                "Value": "bob@example.com"
        ///            },
        ///            {
        ///                "Field": "RecipientName",
        ///                "Value": "Robert Smith"
        ///            },
        ///            {
        ///                "Field": "SeniorEmployeeName",
        ///                "Value": "Elizabeth Johnson"
        ///            },
        ///            {
        ///                "Field": "CUSTOM-SERIAL-NUMBER-ID",
        ///                "Value": "0000-0000-0000-8888-0001"
        ///            }],
        ///            [{
        ///                "Field": "DeliveryAddress",
        ///                "Value": "alice@example.com"
        ///            },
        ///            {
        ///                "Field": "RecipientName",
        ///                "Value": "Alice White"
        ///            },
        ///            {
        ///                "Field": "SeniorEmployeeName",
        ///                "Value": "Elizabeth Johnson"
        ///            },
        ///            {
        ///                "Field": "CUSTOM-SERIAL-NUMBER-ID",
        ///                "Value": "0000-0000-0000-8888-0002"
        ///            }],
        ///            [{
        ///                "Field": "DeliveryAddress",
        ///                "Value": "christine@example.com"
        ///            },
        ///            {
        ///                "Field": "RecipientName",
        ///                "Value": "Christine Johnson"
        ///            },
        ///            {
        ///                "Field": "SeniorEmployeeName",
        ///                "Value": "Gary Brown"
        ///            },
        ///            {
        ///                "Field": "CUSTOM-SERIAL-NUMBER-ID",
        ///                "Value": "0000-0000-0000-8888-0003"
        ///            }]],
        ///            "Global": [{
        ///                "Field": "MailingId",
        ///                "Value": "Human Resources 018"
        ///            }]
        ///        },
        ///        "Subject": "Employee mentorship program information.",
        ///        "TextBody": "%%RecipientName%%, you have been paired with %%SeniorEmployeeName%% as part of our mentorship program!",
        ///        "HtmlBody": "<h1>%%RecipientName%%, you have been paired with %%SeniorEmployeeName%% as part of our mentorship program!</h1>",
        ///        "CustomHeaders": null,
        ///        "To": [{
        ///            "EmailAddress": "%%DeliveryAddress%%",
        ///            "FriendlyName": "%%RecipientName%%"
        ///        }],
        ///        "Cc": null,
        ///        "Bcc": null,
        ///        "From": {
        ///            "EmailAddress": "hr@example.com",
        ///            "FriendlyName": "HR Department"
        ///        },
        ///        "ReplyTo": null,
        ///        "Charset": null,
        ///        "Attachments": null
        ///    }]
        ///}
        /// </summary>
        public static void CompleteInjectionViaSdkObjectAsJson(
            int serverId, string yourApiKey, string apiUrl)
        {
            // The client object processes requests to the SocketLabs Injection API.
            var client = new RestClient(apiUrl);

            // In this example, we will utilize the majority of options available via
            // the Injection API. More details are noted inline as we use them.

            //
            // Construct the object(s) used to generate JSON for the POST request.
            //

            // For this example, we will create two messages in a single injection.
            var postBody = new PostBody
            {
                ServerId = serverId,
                ApiKey = yourApiKey,
                Messages = new EmailMessage[2]
            };

            // The first of two messages to be injected; this example showcases
            // most of the options available with the exception of the inline Merge feature.
            postBody.Messages[0] = new EmailMessage
            {
                Subject = "Welcome to The ABC Company!",
                To = new[]
                {
                    new Address
                    {
                        EmailAddress = "bob@example.com",
                        FriendlyName = "Robert Smith"
                    },
                    new Address
                    {
                        EmailAddress = "alice@example.com",
                        FriendlyName = "Alice White"
                    },
                    new Address
                    {
                        EmailAddress = "christine@example.com",
                        FriendlyName = "Christine Johnson"
                    }
                },
                Cc = new[]
                {
                    new Address
                    {
                        EmailAddress = "hr@example.com",
                        FriendlyName = "HR Department"
                    }
                },
                Bcc = new[]
                {
                    new Address
                    {
                        EmailAddress = "logging@example.com",
                        FriendlyName = "Email Logging Account"
                    }
                },
                From = new Address
                {
                    EmailAddress = "donotreply@example.com",
                    FriendlyName = "From Address"
                },
                ReplyTo = new Address
                {
                    EmailAddress = "hr@example.com",
                    FriendlyName = "HR Department"
                },
                // Please see the API documentation for information on using the MailingId and MessageId
                // fields for tracking groups of messages.
                MailingId = "Human Resources 017",
                MessageId = "0000-9999-0000-9999-0000",
                Charset = "us-ascii",
                TextBody = "Welcome to The ABC Company, new employees! You are all part of our new department.",
                HtmlBody = "<h1>Welcome to The ABC Company, new employee!</h1><br/><p>You are all part of our new department.</p>",
                // Custom SMTP headers are defined in this way.
                CustomHeaders = new[]
                {
                    new CustomHeader
                    {
                        Name = "Internal-Email-Type",
                        Value = "HR/New Employee"
                    }
                },
                // Multiple attachments can be added to a message.
                Attachments = new[]
                {
                    new Attachment
                    {
                        Name = "CompanyContacts.txt",
                        ContentType = "text/plain",
                        Content = Convert.ToBase64String(Encoding.ASCII.GetBytes("THIS IS THE ATTACHMENT")),
                    }
                },
            };

            // The second of two messages to be injected; this example shows how
            // to use the inline Merge feature, which customizes a message for its
            // recipients.
            postBody.Messages[1] = new EmailMessage
            {
                Subject = "Employee mentorship program information.",
                To = new[]
                {
                    // DeliveryAddress is required for all inline merges. Additionally, any other addresses
                    // used in the To, Cc, or Bcc fields will be for header display only, and will not receive
                    // the injected email. Only the DeliveryAddress members will receive the injected message.
                    new Address
                    {
                        EmailAddress = "%%DeliveryAddress%%",
                        FriendlyName = "%%RecipientName%%"
                    }
                },
                From = new Address
                {
                    EmailAddress = "hr@example.com",
                    FriendlyName = "HR Department"
                },
                MailingId = "%%MailingId%%",
                // Merge field variables can go anywhere else in the message. A basic use would be to define
                // a unique MessageId for each outgoing message.
                MessageId = "%%CUSTOM-SERIAL-NUMBER-ID%%",
                // We can even reuse the same variable multiple times, such as %%RecipientName%% being used both
                // to define the name of the recipient in the header, and for addressing the recipient in the
                // message body.
                TextBody = "%%RecipientName%%, you have been paired with %%SeniorEmployeeName%% as part of our mentorship program!",
                HtmlBody = "<h1>%%RecipientName%%, you have been paired with %%SeniorEmployeeName%% as part of our mentorship program!</h1>",
            };

            // Values for each of the merge data fields need to be added.
            postBody.Messages[1].MergeData = new MergeData();

            // Global variables apply to all recipients in the same way.
            postBody.Messages[1].MergeData.Global = new MergeRow[1];
            postBody.Messages[1].MergeData.Global[0] = new MergeRow("MailingId", "Human Resources 018");

            // Per-Message variables are unique to each recipient.
            postBody.Messages[1].MergeData.PerMessage = new MergeRow[3][];

            // Recipient 1 of 3
            postBody.Messages[1].MergeData.PerMessage[0] = new MergeRow[4];
            postBody.Messages[1].MergeData.PerMessage[0][0] = new MergeRow("DeliveryAddress", "bob@example.com");
            postBody.Messages[1].MergeData.PerMessage[0][1] = new MergeRow("RecipientName", "Robert Smith");
            postBody.Messages[1].MergeData.PerMessage[0][2] = new MergeRow("SeniorEmployeeName", "Elizabeth Johnson");
            postBody.Messages[1].MergeData.PerMessage[0][3] = new MergeRow("CUSTOM-SERIAL-NUMBER-ID", "0000-0000-0000-8888-0001");

            // Recipient 2 of 3
            postBody.Messages[1].MergeData.PerMessage[1] = new MergeRow[4];
            postBody.Messages[1].MergeData.PerMessage[1][0] = new MergeRow("DeliveryAddress", "alice@example.com");
            postBody.Messages[1].MergeData.PerMessage[1][1] = new MergeRow("RecipientName", "Alice White");
            postBody.Messages[1].MergeData.PerMessage[1][2] = new MergeRow("SeniorEmployeeName", "Elizabeth Johnson");
            postBody.Messages[1].MergeData.PerMessage[1][3] = new MergeRow("CUSTOM-SERIAL-NUMBER-ID", "0000-0000-0000-8888-0002");

            // Recipient 3 of 3
            postBody.Messages[1].MergeData.PerMessage[2] = new MergeRow[4];
            postBody.Messages[1].MergeData.PerMessage[2][0] = new MergeRow("DeliveryAddress", "christine@example.com");
            postBody.Messages[1].MergeData.PerMessage[2][1] = new MergeRow("RecipientName", "Christine Johnson");
            postBody.Messages[1].MergeData.PerMessage[2][2] = new MergeRow("SeniorEmployeeName", "Gary Brown");
            postBody.Messages[1].MergeData.PerMessage[2][3] = new MergeRow("CUSTOM-SERIAL-NUMBER-ID", "0000-0000-0000-8888-0003");

            try
            {
                // Generate a new POST request.
                var request = new RestRequest(Method.POST) { RequestFormat = DataFormat.Json };

                // Store the request data in the request object.
                request.AddBody(postBody);

                // Make the POST request.
                var result = client.ExecuteAsPost(request, "POST");

                // Store the response result in our custom class.
                using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(result.Content)))
                {
                    var serializer = new DataContractJsonSerializer(typeof (PostResponse));
                    var resp = (PostResponse) serializer.ReadObject(stream);

                    // Display the results.
                    if (resp.ErrorCode.Equals("Success"))
                    {
                        Console.WriteLine("Successful injection!");
                    }
                    else
                    {
                        Console.WriteLine("Failed injection! Returned JSON is: ");
                        Console.WriteLine(result.Content);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error, something bad happened: " + ex.Message);
            }
        }
    }
}
