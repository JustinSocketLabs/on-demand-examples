using System;
using System.IO;
using System.Runtime.Serialization.Json;
using System.Text;
using InjectionApi.Sdk.Client;
using RestSharp;

namespace SocketLabs.InjectionApi.CSharp
{
    static public partial class Samples
    {
        /// <summary>
        /// This example uses generic JsonObject containers to create a POST
        /// request for sending one or more SMTP messages through SocketLabs On-Demand.
        /// 
        /// The JSON request generated by this sample code looks like this:
        /// 
        ///{
        ///    "ServerId": "YOUR SERVER ID HERE",
        ///    "ApiKey": "YOUR API KEY HERE",
        ///    "Messages": [{
        ///        "Subject": "API Template Example",
        ///        "ApiTemplate": "1",
        ///        "To": [{
        ///            "EmailAddress": "%%DeliveryAddress%%",
        ///            "FriendlyName": "%%FirstName"
        ///        }],
        ///        "From": {
        ///            "EmailAddress": "from@example.com",
        ///            "FriendlyName": "The ABC Company"
        ///        },
        ///        "MergeData": {
        ///             "PerMessage": [
        ///                 [
        ///                     {
        ///                         "Field":"DeliveryAddress",
        ///                          "Value":"to@example.com"
        ///                     },
        ///              	    {                  
        ///                         "Field": "FirstName",
        ///                         "Value": "John"
        ///                     }
        ///                 ]
        ///             ]
        ///         }
        ///     }] 
        ///}
        /// </summary>
        public static void SimpleInjectionApiTemplate(
            int serverId, string yourApiKey, string apiUrl)
        {
            // The client object processes requests to the SocketLabs Injection API.
            var client = new RestClient(apiUrl);

            // Construct the objects used to generate JSON for the POST request.
            var recipient1 = new JsonObject();
            recipient1.Add("EmailAddress", "%%DeliveryAddress%%");
            recipient1.Add("FriendlyName", "%%FirstName%%");

            var toList = new JsonArray();
            toList.Add(recipient1);

            var fromField = new JsonObject();
            fromField.Add("EmailAddress", "from@example.com");
            fromField.Add("FriendlyName", "The ABC Company");

            //The DeliveryAddress field is required, all other merge fields are optional.  
            //If your template contains merge fields, you must specify them here.
            var mergeDeliveryAddress = new JsonObject();
            mergeDeliveryAddress.Add("Field", "DeliveryAddress");
            mergeDeliveryAddress.Add("Value", "to@example.com");

            var mergeFirstName = new JsonObject();
            mergeFirstName.Add("Field", "FirstName");
            mergeFirstName.Add("Value", "John");

            var mergeRecipient1 = new JsonArray();
            mergeRecipient1.Add(mergeDeliveryAddress);
            mergeRecipient1.Add(mergeFirstName);

            var perMessage = new JsonArray();
            perMessage.Add(mergeRecipient1);

            var mergeData = new JsonObject();
            mergeData.Add("PerMessage", perMessage);

            var message1 = new JsonObject();
            message1.Add("Subject", "API Template Example");
            message1.Add("ApiTemplate", "1"); //Template ID found in the SocketLabs On-Demand Control Panel
            message1.Add("To", toList);
            message1.Add("From", fromField);
            message1.Add("MergeData", mergeData);

            var messageArray = new JsonObject[1];
            messageArray[0] = message1;

            var body = new JsonObject();
            body.Add("ServerId", serverId);
            body.Add("ApiKey", yourApiKey);
            body.Add("Messages", messageArray);

            try
            {
                // Generate a new POST request.
                var request = new RestRequest(Method.POST) { RequestFormat = DataFormat.Json };

                // Store the request data in the request object.
                request.AddBody(body);

                // Make the POST request.
                var result = client.ExecuteAsPost(request, "POST");

                // Store the response result in our custom class.
                using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(result.Content)))
                {
                    var serializer = new DataContractJsonSerializer(typeof(PostResponse));
                    var resp = (PostResponse)serializer.ReadObject(stream);

                    // Display the results.
                    if (resp.ErrorCode.Equals("Success"))
                    {
                        Console.WriteLine("Successful injection!");
                    }
                    else
                    {
                        Console.WriteLine("Failed injection! Returned JSON is: ");
                        Console.WriteLine(result.Content);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error, something bad happened: " + ex.Message);
            }
        }
    }
}
