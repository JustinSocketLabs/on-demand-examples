using System;
using System.IO;
using System.Runtime.Serialization.Json;
using System.Text;
using InjectionApi.Sdk.Client;
using InjectionApi.Sdk.Email;
using RestSharp;

namespace SocketLabs.InjectionApi.CSharp
{
    static public partial class Samples
    {
        /// <summary>
        /// This example uses the SocketLabs SDK PostBody object to create a POST
        /// request for sending one or more SMTP messages through SocketLabs On-Demand.
        /// The SocketLabs SDK library is required, and for this example we also use
        /// the RestSharp library to ask as our serializer and client.
        /// 
        /// The JSON request generated by this sample code looks like this:
        /// 
        ///{
        ///    "ServerId": "YOUR SERVER ID HERE",
        ///    "ApiKey": "YOUR API KEY HERE",
        ///    "Messages": [{
        ///        "MailingId": null,
        ///        "MessageId": null,
        ///        "MergeData": null,
        ///        "Subject": "Email subject line for SDK example.",
        ///        "TextBody": "The text portion of the message.",
        ///        "HtmlBody": "<h1>The HTML portion of the message</h1><br/><p>A paragraph.</p>",
        ///        "CustomHeaders": null,
        ///        "To": [{
        ///            "EmailAddress": "to@example.com",
        ///            "FriendlyName": null
        ///        }],
        ///        "Cc": null,
        ///        "Bcc": null,
        ///        "From": {
        ///            "EmailAddress": "from@example.com",
        ///            "FriendlyName": "From Address"
        ///        },
        ///        "ReplyTo": null,
        ///        "Charset": null,
        ///        "Attachments": null
        ///    }]
        ///}
        /// </summary>
        public static void SimpleInjectionViaSdkObjectAsJson(
            int serverId, string yourApiKey, string apiUrl)
        {
            // The client object processes requests to the SocketLabs Injection API.
            var client = new RestClient(apiUrl);

            // Construct the object used to generate JSON for the POST request.
            var postBody = new PostBody
            {
                ServerId = serverId,
                ApiKey = yourApiKey,
                Messages = new[]
                {
                    new EmailMessage
                    {
                        Subject = "Email subject line for SDK example.",
                        To = new[]
                        {
                            new Address
                            {
                                EmailAddress = "to@example.com",
                                FriendlyName = null
                            }
                        },
                        From = new Address
                        {
                            EmailAddress = "from@example.com",
                            FriendlyName = "From Address"
                        },
                        TextBody = "The text portion of the message.",
                        HtmlBody = "<h1>The HTML portion of the message</h1><br/><p>A paragraph.</p>",
                    }
                }
            };

            try
            {
                // Generate a new POST request.
                var request = new RestRequest(Method.POST) { RequestFormat = DataFormat.Json };

                // Store the request data in the request object.
                request.AddBody(postBody);

                // Make the POST request.
                var result = client.ExecuteAsPost<PostResponse>(request, "POST");

                // Store the response result in our custom class.
                using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(result.Content)))
                {
                    var serializer = new DataContractJsonSerializer(typeof (PostResponse));
                    var resp = (PostResponse) serializer.ReadObject(stream);

                    // Display the results.
                    if (resp.ErrorCode.Equals("Success"))
                    {
                        Console.WriteLine("Successful injection!");
                    }
                    else
                    {
                        Console.WriteLine("Failed injection! Returned JSON is: ");
                        Console.WriteLine(result.Content);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error, something bad happened: " + ex.Message);
            }
        }
    }
}
