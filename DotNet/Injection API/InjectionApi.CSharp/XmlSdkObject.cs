using System;
using System.IO;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Xml;
using InjectionApi.Sdk.Client;
using InjectionApi.Sdk.Email;
using RestSharp;

namespace SocketLabs.InjectionApi.CSharp
{
    static public partial class Samples
    {
        /// <summary>
        /// This example uses the SocketLabs SDK PostBody object to create a POST
        /// request for sending one or more SMTP messages through SocketLabs On-Demand.
        /// The SocketLabs SDK library is required, and for this example we also use
        /// the RestSharp library to ask as our serializer and client.
        /// 
        /// The XML request generated by this sample code looks like this:
        /// 
        ///<?xml version="1.0" encoding="utf-8"?>
        ///<PostBody xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        ///    <ServerId>YOUR SERVER ID HERE</ServerId>
        ///    <ApiKey>YOUR API KEY HERE</ApiKey>
        ///    <Messages>
        ///        <EmailMessage>
        ///            <Subject>Email subject line for SDK example.</Subject>
        ///            <TextBody>The text portion of the message.</TextBody>
        ///            <HtmlBody>&lt;h1&gt;The HTML portion of the message&lt;/h1&gt;&lt;br/&gt;&lt;p&gt;A paragraph.&lt;/p&gt;</HtmlBody>
        ///            <To>
        ///                <Address>
        ///                    <EmailAddress>to@example.com</EmailAddress>
        ///                    <FriendlyName>Test Address</FriendlyName>
        ///                </Address>
        ///            </To>
        ///            <From>
        ///                <EmailAddress>from@example.com</EmailAddress>
        ///                <FriendlyName>From Address</FriendlyName>
        ///            </From>
        ///        </EmailMessage>
        ///    </Messages>
        ///</PostBody>
        /// </summary>
        public static void SimpleInjectionViaSdkObjectAsXml(
            int serverId, string yourApiKey, string apiUrl)
        {
            // The client object processes requests to the SocketLabs Injection API.
            var client = new RestClient(apiUrl);
            
            // Construct the object used to generate XML for the POST request.
            var postBody = new PostBody
            {
                ServerId = serverId,
                ApiKey = yourApiKey,
                Messages = new[]
                {
                    new EmailMessage
                    {
                        Subject = "Email subject line for SDK example.",
                        To = new[]
                            {
                                new Address
                                {
                                    EmailAddress = "to@example.com",
                                    FriendlyName = "Test Address"
                                }
                            },
                        From = new Address
                            {
                                EmailAddress = "from@example.com",
                                FriendlyName = "From Address"
                            },
                        TextBody = "The text portion of the message.",
                        HtmlBody = "<h1>The HTML portion of the message</h1><br/><p>A paragraph.</p>",
                    }
                }
            };

            try
            {
                // Generate a new POST request.
                var request = new RestRequest(Method.POST) { RequestFormat = DataFormat.Xml };

                // Store the request data in the request object.
                string body;
                using (Stream stream = new MemoryStream())
                {
                    var serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostBody));
                    serializer.Serialize(XmlWriter.Create(stream), postBody);
                    stream.Flush();
                    stream.Seek(0, SeekOrigin.Begin);
                    using (var reader = new StreamReader(stream))
                    {
                        body = reader.ReadToEnd();
                    }
                }
                request.AddParameter("application/xml; charset=utf-8", body, ParameterType.RequestBody);

                // Make the POST request.
                var result = client.ExecuteAsPost(request, "POST");

                // Store the response result in our custom class.
                using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(result.Content)))
                {
                    var serializer = new DataContractJsonSerializer(typeof (PostResponse));
                    var resp = (PostResponse) serializer.ReadObject(stream);

                    // Display the results.
                    if (resp.ErrorCode.Equals("Success"))
                    {
                        Console.WriteLine("Successful injection!");
                    }
                    else
                    {
                        Console.WriteLine("Failed injection! Returned JSON is: ");
                        Console.WriteLine(result.Content);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error, something bad happened: " + ex.Message);
            }
        }
    }
}
